#!/usr/bin/env python
#
# Copyright (C) James MacKay 2008
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

from audiofs import mpd
import audiofs.utilities as ut


# Constants.

# The names used in text formats for the various pieces of information about
# (or at least related to) the current track.
_pathnameName = "path"
_positionName = "pos"
_countName = "count"
_trackNumberName = "number"
_trackTitleName = "title"
_albumTitleName = "album"
_artistName = "artist"
_genreName = "genre"
_releaseDateName = "date"
_commentName = "comment"
_ratingName = "rating"
_elapsedTimeName = "elapsedTime"
_totalTimeName = "totalTime"

# The text format that's used when one isn't specified explicitly.
_defaultTextFmt = "%(" + _trackTitleName + ")s by %(" + _artistName + ")s"


# Classes.

class Program(ut.ut_AbstractProgram):
    """
    Represents programs that create a database file for an MPD server.
    """

    def _usageMessage(self, progName, shortHelpOpts, longHelpOpts,
                      helpOptionsDesc):
        args = [progName, shortHelpOpts, longHelpOpts,
                helpOptionsDesc, '%(name)s']
        args.extend([_pathnameName, _positionName, _countName,
            _trackNumberName, _trackTitleName, _albumTitleName, _artistName,
            _genreName, _releaseDateName, _commentName, _ratingName,
            _elapsedTimeName, _totalTimeName])
        args.append(_defaultTextFmt)
        args = tuple(args)
        result = """
usage: %s %s %s [fmt]

which causes information about the currently selected MPD
server's current track to be spoken.
%s
What information is spoken is determined by 'fmt', which is a
format string consisting of plain text and special identifiers
of the form '%s', each of which is replaced with a piece
of information about the current track specified by 'name':

    %s
        the pathname of the track's audio file
    %s
        the 1-based position of the track in the MPD server's
        current playlist
    %s
        the total number of tracks in the MPD server's
        current playlist
    %s
        the track's track number in the album it's part of
    %s
        the track's title
    %s
        the title of the album the track is from
    %s
        the name of the artist that performed the track
    %s
        the name of the track's genre
    %s
        the track's release date
    %s
        the comment associated with the track
    %s
        the track's rating
    %s
        the track's elapsed time (mm:ss)
    %s
        the track's total time (mm:ss)

If 'fmt' is omitted then it defaults to the format
'%s'.
""" % args
        assert result
        return result

    def _buildInitialArgumentsMap(self):
        result = { "text": None }
        assert result is not None
        return result

    def _processOption(self, opt, val, argsMap):
        assert opt
        # 'val' may be None
        assert argsMap is not None
        return self._handleUnknownOption(opt)  # we don't take any options

    def _processNonOptionArguments(self, args, argsMap):
        assert args is not None
        assert argsMap is not None
        result = True
        numArgs = len(args)
        if numArgs > 1:
            self._fail("Too many arguments")
            result = False
        else:
            if numArgs == 1:
                fmt = args[0]
            else:
                fmt = _defaultTextFmt
            s = mpd.mp_Mpd()  # the currently selected server
            title = s.trackTitle()
            if title is not None:
                try:
                    m = self._buildCurrentTrackInformationMap(s)
                    argsMap["text"] = fmt % m
                except:
                    result = False
                    self._fail("Invalid text format")
            else:
                argsMap["text"] = "no current track"
        assert not result or (argsMap.get("text") is not None)
        return result

    def _execute(self, argsMap):
        assert argsMap is not None
        result = 0
        txt = argsMap["text"]
        ut.ut_speak(txt)
        assert result >= 0
        return result

    def _buildCurrentTrackInformationMap(self, s):
        """
        Builds and returns a map from the names used in text formats to the
        corresponding values obtained from the MPD server 's' - an mp_Mpd
        object.

        Note: all of the returned map's keys and values will be strings.
        """
        result = {
            _pathnameName:      s.currentTrackPathname(),
            _positionName:      str(s.currentTrackPosition()),
            _countName:         s.trackCount(),
            _trackNumberName:   s.trackNumber(),
            _trackTitleName:    s.trackTitle(),
            _albumTitleName:    s.albumTitle(),
            _artistName:        s.artist(),
            _genreName:         s.genre(),
            _releaseDateName:   s.releaseDate(),
            _commentName:       s.comment(),
            _ratingName:        str(s.rating()),
            _elapsedTimeName:   s.currentTrackElapsedTime(),
            _totalTimeName:     s.currentTrackTotalTime()
        }
        assert result is not None
        return result


# Main program.

Program().run()
