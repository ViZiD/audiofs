#!/usr/bin/env python
#
# Copyright (C) James MacKay 2008
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

from audiofs import mpd
import audiofs.utilities as ut


# Classes.

class Program(ut.ut_AbstractProgram):
    """
    Represents programs that create a database file for an MPD server.
    """

    def _usageMessage(self, progName, shortHelpOpts, longHelpOpts,
                      helpOptionsDesc):
        result = """
usage: %s %s %s

which refreshes/updates the information shown about the currently
selected MPD server's current track, assuming that the information
is currently being shown).
%s""" % (progName, shortHelpOpts, longHelpOpts, helpOptionsDesc)
        assert result
        return result

    def _buildInitialArgumentsMap(self):
        result = {}
        assert result is not None
        return result

    def _processOption(self, opt, val, argsMap):
        assert opt
        # 'val' may be None
        assert argsMap is not None
        return self._handleUnknownOption(opt)  # we don't take any options

    def _processNonOptionArguments(self, args, argsMap):
        assert args is not None
        assert argsMap is not None
        result = True
        if len(args):
            self._fail("Too many arguments")
            result = False
        return result

    def _execute(self, argsMap):
        assert argsMap is not None
        result = 0
        mpd.mp_Mpd().refreshShownCurrentTrackInformation()
        assert result >= 0
        return result


# Main program.

Program().run()
