#!/usr/bin/env python
#
# Copyright (C) James MacKay 2010
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

from audiofs import config, musicfs
import audiofs.utilities as ut

import os.path


# Constants

_conf = config.obtain()

_programName = "mpd-all"

# Long option names.
_longOptPrefix = "--"
_stopOpt = "stop"
_fullStopOpt = _longOptPrefix + _stopOpt
_listOpt = "list"
_fullListOpt = _longOptPrefix + _listOpt

# Keys into our program's arguments map.
_doStopArgName = "doStop"
_doListArgName = "doList"
_configFileArgName = "configFile"
_dataDirArgName = "dataDir"

# Command formats.
_echoCmd = ""
#_echoCmd = "echo "  # comment this out to have programs execute
_startServerCmdFmt = _echoCmd + _conf.mpdProgram + " '%s'"
_stopServerCmdFmt = _echoCmd + _conf.mpdProgram + " --kill '%s'"

# Error messages and message formats.
_cannotListAndStopMsg = "The '%s' (or '-l') and '%s' options can't " \
    "be used together" % (_fullListOpt, _fullStopOpt)

# Default values
_defaultDataDir = "/var/lib/%s" % _programName
_defaultConfigFile = "/etc/%s.conf" % _programName

# Server file and directory names.
_serverFilePrefix = "mpd"
_serverDataDirFmt = "server-%i"
_serverPlaylistsSubdir = "playlists"
_serverLogFile = "%s.log" % _serverFilePrefix
_serverPidFile = "%s.pid" % _serverFilePrefix
_serverStateFile = "%s.state" % _serverFilePrefix
_serverConfigFile = "%s.generated.conf" % _serverFilePrefix

# Server configuration file formats.
_configParamDefinitionFmt = "%s \"%s\"\n"
_serverConfigStartFmt = """%(div)s
#
# This file was automatically generated, so
#
#     DO NOT MANUALLY EDIT THIS FILE !!!
#
# Especially since it will get replaced the next time its MPD server is
# started using '%(progName)s'. However, most of its contents are taken from
# the %(progName)s configuration file with pathname
#
#     %(str)s
#
# so you might want to edit that file instead.
#
%(div)s

""" % { "div": "#" * 72, "str": "%s", "progName": _programName }

_serverConfigGeneratedParamsStartFmt = """
# The following parameters' values are automatically determined and
# cannot be customized.
#
# Note: these parameters are assumed not to appear uncommented above.
# If they do then the %(progName)s configuration file
#
#    %(str)s
#
# is invalid and so an MPD server configured using this file may not
# work correctly.
""" % { "str": "%s", "progName": _programName }


# Exception classes.

class MpdAllException(Exception):
    """
    The class of exception thrown to indicate that some aspect of starting
    or stopping MPD servers failed.
    """
    pass


# Functions.

def _serverName(desc):
    """
    Returns the name of the MPD server described by 'desc' that is suitable
    for use in error messages, etc.
    """
    assert desc is not None
    result = "%s:%i" % _conf.mpdServer(desc)
    assert result
    return result

def _serverDataDirectory(dataDir, desc):
    """
    Given the pathname 'dataDir' of the main data directory, returns the
    pathname of the subdirectory of that directory that will contain the
    data files for the MPD server described by 'desc'.
    """
    assert dataDir is not None
    assert desc is not None
    (h, p) = _conf.mpdServer(desc)
    result = os.path.join(dataDir, _serverDataDirFmt % p)
    assert result
    return result

def _serverConfigurationFile(serverDir):
    """
    Given the pathname of an MPD server's data directory, returns the
    pathname of the server's autogenerated configuration file.
    """
    assert serverDir is not None
    result = os.path.join(serverDir, _serverConfigFile)
    assert result
    return result

def _serverPlaylistsDirectory(serverDir):
    """
    Given the pathname of an MPD server's data directory, returns the
    pathname of the server's playlists directory.
    """
    assert serverDir is not None
    result = os.path.join(serverDir, _serverPlaylistsSubdir)
    assert result
    return result


def _writeConfigurationFileContentsTo(f, path, configFile):
    """
    Writes the contents of the mpd-all configuration file with pathname
    'configFile' to the open file object 'f' that represents the server
    configuration file with pathname 'path'. An MpdAllException is raised
    if all of the contents are not successfully copied.
    """
    assert f is not None
    assert path is not None
    assert configFile is not None
    src = None
    try:
        try:
            src = file(configFile, "r")
        except BaseException as ex:
            raise MpdAllException("the %s configuration file '%s' could "
                "not be read: %s" % (_programName, configFile, str(ex)))
        try:
            while True:
                line = src.readline()
                if not line:
                    break  # while
                f.write(line)
        except BaseException as ex:
            raise MpdAllException("copying the contents of the %s "
                "configuration file '%s' into the server configuration "
                "file '%s' failed: %s" %
                (_programName, configFile, path, str(ex)))
    finally:
        ut.ut_tryToCloseAll(src)  # but NOT 'f'

def _writeGeneratedConfigurationParametersTo(f, path, desc, serverDir):
    """
    Writes the automatically generated configuration parameter definitions
    for the MPD server described by 'desc' to the file object 'f' that
    represents the server configuration file with pathname 'path'. The
    pathname of the server's data directory is 'serverDir'. An
    MpdAllException is raised if all of the parameter definitions aren't
    successfully generated or written out.
    """
    assert f is not None
    assert path is not None
    assert desc is not None
    assert serverDir is not None
    (host, port) = _conf.mpdServer(desc)
    fmt = _configParamDefinitionFmt
    try:
        f.write(fmt % ("port", str(port)))
        f.write(fmt % ("playlist_directory",
            _serverPlaylistsDirectory(serverDir)))
        f.write(fmt % ("log_file",
            os.path.join(serverDir, _serverLogFile)))
        f.write(fmt % ("pid_file",
            os.path.join(serverDir, _serverPidFile)))
        f.write(fmt % ("state_file",
            os.path.join(serverDir, _serverStateFile)))
    except IOError as ex:
        raise MpdAllException("writing a parameter definition to the "
            "server configuration file '%s' failed: %s" % (path, str(ex)))
    except BaseException as ex:
        raise MpdAllException("generating the value of a parameter "
            "whose definition was to be written to the server configuration "
            "file '%s' failed: %s" % (path, str(ex)))

def _createServerConfigurationFile(path, desc, mainConfigFile, serverDir):
    """
    Creates an MPD server configuration file with pathname 'path' for the
    server described by 'desc' using the mpd-all configuration file with
    pathname 'mainConfigFile' for most of its contents, or raises an
    MpdAllException if the file couldn't be fully created. The pathname of
    the server's data directory is 'serverDir'.

    If a file with pathname 'path' already exists then it will be replaced.
    """
    assert path is not None
    assert desc is not None
    assert mainConfigFile is not None
    assert serverDir is not None
    f = None
    try:
        try:
            f = file(path, "w")
        except BaseException as ex:
            raise MpdAllException("creating the server configuration file "
                                  "'%s' failed: %s" % (path, str(ex)))
        try:
            f.write(_serverConfigStartFmt % mainConfigFile)
            _writeConfigurationFileContentsTo(f, path, mainConfigFile)
            f.write(_serverConfigGeneratedParamsStartFmt % mainConfigFile)
            _writeGeneratedConfigurationParametersTo(f, path, desc,
                                                     serverDir)
        except MpdAllException as ex:
            raise ex
        except IOError as ex:
            raise MpdAllException("writing to the server configuration "
                                  "file '%s' failed: %s" % (path, str(ex)))
        except BaseException as ex:
            raise MpdAllException("generating the contents of the server "
                                  "configuration file '%s' failed: %s" %
                                  (path, str(ex)))
    finally:
        if not ut.ut_tryToCloseAll(f):
            raise MpdAllException("closing the server configuration file "
                "'%s' after writing its contents failed, so it may be "
                "incomplete" % path)


def listServer(desc, configFile, dataDir):
    """
    Lists the MPD server described by 'desc'.
    """
    print(_serverName(desc))

def startServer(desc, configFile, dataDir):
    """
    Starts the MPD server described by 'desc'.
    """
    name = _serverName(desc)
    print("Starting MPD server %s ..." % name)
    serverDir = _serverDataDirectory(dataDir, desc)
    try:
        ut.ut_createDirectory(serverDir)
    except BaseException as ex:
        raise MpdAllException("creating the server data directory '%s' "
                              "failed: %s" % (serverDir, str(ex)))
    ut.ut_tryToMakeFileAllAccess(serverDir)

    playlistsDir = _serverPlaylistsDirectory(serverDir)
    try:
        ut.ut_createDirectory(playlistsDir)
    except BaseException as ex:
        raise MpdAllException("creating the server playlist "
                "subdirectory '%s' failed: %s" % (playlistsDir, str(ex)))
    ut.ut_tryToMakeFileAllAccess(playlistsDir)

    serverConf = _serverConfigurationFile(serverDir)
    _createServerConfigurationFile(serverConf, desc, configFile, serverDir)

    cmd = _startServerCmdFmt % serverConf
    if ut.ut_executeShellCommand(cmd) is None:
        raise MpdAllException("executing the following command to start it "
                              "failed: %s" % cmd)
    print("Successfully started the MPD server %s" % name)

def stopServer(desc, configFile, dataDir):
    """
    Stops the MPD server described by 'desc'.
    """
    name = _serverName(desc)
    print("Stopping MPD server %s ..." % name)
    serverDir = _serverDataDirectory(dataDir, desc)
    serverConf = _serverConfigurationFile(serverDir)
    if not os.path.exists(serverConf):
        raise MpdAllException("the server configuration file '%s' doesn't "
                            "exist (or is a broken symlink)" % serverConf)
    cmd = _stopServerCmdFmt % serverConf
    if ut.ut_executeShellCommand(cmd) is None:
        raise MpdAllException("executing the following command to stop it "
                              "failed: %s" % cmd)
    print("Successfully stopped the MPD server %s" % name)


# Classes.

class Program(ut.ut_AbstractProgram):
    """
    Represents a program that starts or stops all of the local MPD servers
    that audiofs knows about.
    """

    def _usageMessage(self, progName, shortHelpOpts, longHelpOpts,
                      helpOptionsDesc):
        result = """
usage: %(progName)s %(shortHelpOpts)s %(longHelpOpts)s [-d data-dir] [ -l | %(listOpt)s | %(stopOpt)s ] config

which starts - or, if the optional '%(stopOpt)s' option is
specified, stops - all of the local MPD servers (that audiofs
knows about).

If one of the optional '-l' or '%(listOpt)s' options is specified
then no servers are started or stopped: they're all just listed,
one per line, in 'host:port' form.

'config' is the (usually absolute) pathname of the %(progName)s
configuration file to use to locate and/or configure the MPD
servers. It's usually named $(defaultConfigFile)s, and
is a valid mpd configuration file (like /etc/mpd.conf or
~/.mpdconf) except that the following parameters are assumed
to have been omitted or commented out:

    playlist_directory, log_file, error_file, pid_file,
    state_file, port

If the optional '-d' option is specified then various files
for each of the MPD servers will be searched for under the
'data-dir' directory: otherwise %(defaultDataDir)s will
be used. (The directory, as well as directories and files
under it, will be created and deleted if and as necessary.)
%(helpOptionsDesc)s""" % {
        "progName": progName, "shortHelpOpts": shortHelpOpts,
        "longHelpOpts": longHelpOpts, "helpOptionsDesc": helpOptionsDesc,
        "stopOpt": _fullStopOpt, "listOpt": _fullListOpt,
        "defaultConfigFile": _defaultConfigFile,
        "defaultDataDir": _defaultDataDir }
        assert result
        return result

    def _shortOptions(self):
        result = "d:l"
        assert result is not None
        return result

    def _longOptionsList(self):
        result = [_stopOpt, _listOpt]
        assert result is not None
        return result

    def _buildInitialArgumentsMap(self):
        result = {
            _doStopArgName: False,
            _doListArgName: False,
            _configFileArgName: None,
            _dataDirArgName: _defaultDataDir
        }
        assert result is not None
        return result

    def _processOption(self, opt, val, argsMap):
        assert opt
        # 'val' may be None
        assert argsMap is not None
        result = True
        if opt == _fullStopOpt:
            argsMap[_doStopArgName] = True
        elif opt == _fullListOpt or opt == "-l":
            argsMap[_doListArgName] = True
        elif opt == "-d":
            argsMap[_dataDirArgName] = val
        else:
            result = self._handleUnknownOption(opt)
        return result

    def _processNonOptionArguments(self, args, argsMap):
        assert args is not None
        assert argsMap is not None
        result = False
        numArgs = len(args)
        if numArgs == 1:
            f = args[0]
            if os.path.isdir(f):
                self._fail("The configuration file '%s' is actually "
                    "a directory" % f)
            elif not os.path.exists(f):
                self._fail("The configuration file '%s' doesn't "
                    "exist (or is a broken symlink)" % f)
            else:
                # The config file exists and isn't a directory.
                argsMap[_configFileArgName] = f
                result = True
        elif numArgs == 0:
            self._fail("No configuration file pathname was specified")
        else:
            self._fail("Too many arguments")
        return result

    def _checkArgumentCombinations(self, argsMap):
        assert argsMap is not None
        result = True
        if argsMap[_doStopArgName] and argsMap[_doListArgName]:
            result = False
            self._fail(_cannotListAndStopMsg)
        return result

    def _execute(self, argsMap):
        assert argsMap is not None
        result = 0
        doStop = argsMap[_doStopArgName]
        doList = argsMap[_doListArgName]
        configFile = argsMap[_configFileArgName]
        dataDir = argsMap[_dataDirArgName]
        assert not (doStop and doList)
        if doList:
            (f, action) = (listServer, "Listing")
        elif doStop:
            (f, action) = (stopServer, "Stopping")
        else:
            (f, action) = (startServer, "Starting")
        if result == 0:
            for desc in _conf.allMpdServerDescriptions():
                name = _serverName(desc)
                if _conf.isLocalMpdServer(desc):
                    try:
                        f(desc, configFile, dataDir)
                    except MpdAllException as ex:
                        result = 2
                        self._fail("%s the MPD server '%s' failed "
                            "because %s" % (action, name, str(ex)))
                    except BaseException as ex:
                        result = 3
                        self._fail("%s the MPD server '%s' failed "
                            "due to an unexpected problem: %s" %
                            (action, name, str(ex)))
        assert result >= 0
        return result


# Main program.

Program().run()
